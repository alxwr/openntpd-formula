{%- macro render(pillar_entry, statement, default_key, others_keys) -%}
{%- if salt['pillar.get'](pillar_entry, False) is string %}
{{ statement }} {{ salt['pillar.get'](pillar_entry) }}
{%- else -%}
{%- for value in salt['pillar.get'](pillar_entry, []) %}
{{ statement }} {{ get_values(value, 'address', ['rtable']) }}
{%- else -%}
{{ caller() }}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}

{%- macro get_values(value, default_key, others_keys) %}
{%- if value is string %}{{ value }}
{%- else %}
{%- if default_key in value %}{{ value[default_key] }}
  {%- for key in others_keys %}{%- if key in value %} {{ key }} {{ value[key] }}{%- endif -%}{% endfor -%}
{%- endif %}
{%- endif -%}
{% endmacro -%}
# ntpd configuration file, see ntpd.conf(5)

# Addresses to listen on (ntpd does not listen by default)
{%- call render('openntpd:listen', 'listen on', 'address', ['rtable']) %}
#listen on *
{%- endcall %}

# sync to a single server
{%- call render('openntpd:server', 'server', 'address', ['weight', 'rtable']) %}
#server ntp.example.org
{%- endcall %}

# use a random selection of NTP Pool Time Servers
# see http://support.ntp.org/bin/view/Servers/NTPPoolServers
{%- call render('openntpd:servers', 'servers', 'address', ['weight', 'rtable']) %}
#servers ntp.pool.ntp.org
{%- endcall %}

# use a specific local timedelta sensor (radio clock, etc)
{%- call render('openntpd:sensor', 'sensor', 'device', ['correction', 'weight', 'refid', 'stratum']) %}
#sensor nmea0
#sensor *
{%- endcall %}
